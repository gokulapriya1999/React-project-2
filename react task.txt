import React, { useState, useEffect } from 'react';
import axios from 'axios';

const App = () => {
  const [monitors, setMonitors] = useState([]);
  const [formData, setFormData] = useState({
    message: '',
    name: '',
    query: '',
    type: ''
  });

  useEffect(() => {
    fetchMonitors();
  }, []);

  const fetchMonitors = async () => {
    try {
      const response = await axios.get('YOUR_DATADOG_MONITOR_API_ENDPOINT');
      setMonitors(response.data.monitors);
    } catch (error) {
      console.error('Error fetching monitors:', error);
    }
  };

  const createMonitor = async () => {
    try {
      await axios.post('YOUR_DATADOG_MONITOR_API_ENDPOINT', formData);
      fetchMonitors();
      setFormData({ message: '', name: '', query: '', type: '' });
    } catch (error) {
      console.error('Error creating monitor:', error);
    }
  };

  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  return (
    <div>
      <h1>Monitors</h1>
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Message</th>
            <th>Query</th>
            <th>Type</th>
          </tr>
        </thead>
        <tbody>
          {monitors.map((monitor) => (
            <tr key={monitor.id}>
              <td>{monitor.name}</td>
              <td>{monitor.message}</td>
              <td>{monitor.query}</td>
              <td>{monitor.type}</td>
            </tr>
          ))}
        </tbody>
      </table>
      <form onSubmit={(e) => { e.preventDefault(); createMonitor(); }}>
        <input type="text" name="name" placeholder="Name" value={formData.name} onChange={handleInputChange} />
        <input type="text" name="message" placeholder="Message" value={formData.message} onChange={handleInputChange} />
        <input type="text" name="query" placeholder="Query" value={formData.query} onChange={handleInputChange} />
        <input type="text" name="type" placeholder="Type" value={formData.type} onChange={handleInputChange} />
        <button type="submit">Create Monitor</button>
      </form>
    </div>
  );
};

export default App;

8124703844s
